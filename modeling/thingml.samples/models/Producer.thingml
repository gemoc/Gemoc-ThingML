datatype EInteger<4>
	@java_type "Integer"

object EString
	@java_type "String"

thing fragment DataMsgs {
	message data(payload : EInteger)
	message ack()
	message nack()
}

thing fragment SynchroMsgs {
	message stop()
}

thing Producer includes DataMsgs, SynchroMsgs {
	provided port output {
		sends data
		receives ack
		receives nack
	}

	provided port synchro {
		sends stop
	}

	readonly property consumer_count : EInteger = 0
	property consumer_ack : EInteger = 0
	property consumer_nack : EInteger = 0
	readonly property data_size : EInteger = 0
	property data_list : EInteger[data_size]
	property data_index : EInteger = 0

	function log(line : EString) do
		print "Producer  : " + line + "\n"
	end

	statechart Behaviour init Produce {
		on entry log("Started")

		state Produce {
			transition -> Wait
				guard data_index < data_size
				action do
					var data : EInteger = data_list[data_index]
					data_index++
					log("Sending \"" + data + "\"")
					output!data(data)
				end

			transition -> End
				guard data_index >= data_size
		}

		state Wait {
			on entry do
				consumer_ack = 0
				consumer_nack = 0
			end

			internal
				event output?ack
				guard (consumer_ack + consumer_nack + 1) < consumer_count
				action consumer_ack++

			internal
				event output?nack
				guard (consumer_ack + consumer_nack + 1) < consumer_count
				action consumer_nack++

			transition -> Produce
				event output?ack
				guard consumer_count == (consumer_ack + consumer_nack + 1)

			transition -> Produce
				event output?nack
				guard (consumer_ack > 0) and (consumer_count == (consumer_ack + consumer_nack + 1))

			transition -> Error
				event output?nack
				guard consumer_count == (consumer_nack + 1)
		}

		final state Error {
			on entry do
				synchro!stop()
				log("Error")
			end
		}

		final state End {
			on entry do
				synchro!stop()
				log("Stopped")
			end
		}
	}
}

thing fragment Consumer includes DataMsgs, SynchroMsgs {
	required port input {
		receives data
		sends ack
		sends nack
	}

	required port synchro {
		receives stop
	}

	readonly property consumer_number : EInteger = 0
	property current_state : EInteger = 0
	readonly property state_count : EInteger = 3
	readonly property payload_count : EInteger = 4
	property links : EInteger[state_count * payload_count]
	set links[0] = 0
	set links[1] = 0
	set links[2] = 0
	set links[3] = 0
	set links[4] = 0
	set links[5] = 0
	set links[6] = 0
	set links[7] = 0
	set links[8] = 0
	set links[9] = 0
	set links[10] = 0
	set links[11] = 0

	function log(line : EString) do
		print "Consumer" + consumer_number + " : " + line + "\n"
	end

	statechart Behaviour init Active {
		on entry log("Started")

		state Active {
			internal
				event data : input?data
				action do
					var new_state : EInteger = links[(current_state - 1) * payload_count + data.payload]
					if (new_state == 0) do
						log("No link from state " + current_state + " with event " + data.payload)
						input!nack()
					end else do
						log("Event " + data.payload + " --> Going from state " + current_state + " to " + new_state)
						current_state = new_state
						input!ack()
					end
				end

			transition -> End
				event synchro?stop
		}

		final state End {
			on entry log("Stopped")
		}
	}
}

thing Consumer1 includes Consumer {
	set consumer_number = 1
	set links[0] = 1
	set links[1] = 2
	set links[4] = 1
	set links[6] = 3
	set links[7] = 2
	set links[10] = 3
	set links[11] = 2
	set current_state = 2
}

thing Consumer2 includes Consumer {
	set consumer_number = 2
	set current_state = 2
	set links[2] = 2
	set links[3] = 1
	set links[4] = 3
	set links[5] = 2
	set links[6] = 1
	set links[9] = 2
	set links[11] = 3
}

thing Consumer3 includes Consumer {
	set consumer_number = 3
	set current_state = 2
	set links[0] = 1
	set links[3] = 2
	set links[5] = 1
	set links[6] = 3
	set links[7] = 2
	set links[8] = 2
	set links[9] = 3
}

configuration ProducerConfig {
	instance producer : Producer
	set producer.consumer_count = 3
	set producer.data_size = 6
	set producer.data_list[0] = 1
	set producer.data_list[1] = 3
	set producer.data_list[2] = 2
	set producer.data_list[3] = 2
	set producer.data_list[4] = 0
	set producer.data_list[5] = 0

	instance consumer1 : Consumer1
	connector consumer1.input => producer.output
	connector consumer1.synchro => producer.synchro

	instance consumer2 : Consumer2
	connector consumer2.input => producer.output
	connector consumer2.synchro => producer.synchro

	instance consumer3 : Consumer3
	connector consumer3.input => producer.output
	connector consumer3.synchro => producer.synchro
}
