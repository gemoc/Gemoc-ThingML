thing fragment PingPongMsgs {
	message ping()
	message pong()
}

thing PingServer includes PingPongMsgs {
	provided port ping_service {
		sends pong
		receives ping
	}

	statechart PingServerMachine init Active {
		on entry print "Ping Server Started!\n"

		state Active {
			internal
				event ping_service?ping
				action ping_service!pong()
		}
	}
}

thing PingClient includes PingPongMsgs {

	required port ping_service {
		receives pong
		sends ping
	}

	statechart PingClientMachine init Ping {
		on entry print "Ping Client Started!\n"

		state Ping {
			on entry do
				print "Send Ping..."
				ping_service!ping()
			end

			transition PONG -> Stop
				event ping_service?pong
				action print "Got Pong!\n"
		}

		final state Stop {
			on entry print "Bye.\n"
		}
	}
}

configuration PingPongConfig {
	instance client : PingClient
	instance server : PingServer
	connector client.ping_service => server.ping_service
}
